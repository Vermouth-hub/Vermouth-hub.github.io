<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>suctf_signin</title>
    <link href="/2024/12/13/suctf-signin/"/>
    <url>/2024/12/13/suctf-signin/</url>
    
    <content type="html"><![CDATA[<h1 id="suctf-signin题解"><a href="#suctf-signin题解" class="headerlink" title="suctf_signin题解"></a><center>suctf_signin题解</center></h1><p><em>挺有意思的一道题目，记录一下</em><br>首先把程序扔进ida中，找到如下的main函数</p><p><img src="/2024/12/13/suctf-signin/1.png" alt="main函数"></p><p>进入sub_96a查看，发现是将input存放到arr中，然后再通过变化arr来进一步验证flag<br>接着是下面的gmpz函数，set_str推测为将后面的字符串赋值给前面的字符串。powm函数比较重要，其作用为: 计算 (v6 ^ e) mod v4 的值，并将值存放在第一个参数v6中</p><p>仔细想想，这是不是和rsa加密过程很像？<br>因此直接将大数分解，丢进rsa脚本，得到flag:<br>suctf{Pwn_@_hundred_years}</p><p>脚本如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Util.number <span class="hljs-keyword">import</span> *<br><span class="hljs-keyword">from</span> gmpy2 <span class="hljs-keyword">import</span> *<br>e = <span class="hljs-number">65537</span><br>q = <span class="hljs-number">282164587459512124844245113950593348271</span><br>p = <span class="hljs-number">366669102002966856876605669837014229419</span><br>n = q * p<br>c = <span class="hljs-number">78510953323073667749065685964447569045476327122134491251061064910992472210485</span><br>phi = (p-<span class="hljs-number">1</span>) * (q-<span class="hljs-number">1</span>)<br>d = invert(e, phi)<br>m = powmod(c, d, n)<br><span class="hljs-built_in">print</span>(m)<br><span class="hljs-comment"># 输出flag</span><br><span class="hljs-built_in">print</span>(long_to_bytes(m))<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Reverse</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>红帽杯 easyre wp</title>
    <link href="/2024/12/06/%E7%BA%A2%E5%B8%BD%E6%9D%AF-easyre-wp/"/>
    <url>/2024/12/06/%E7%BA%A2%E5%B8%BD%E6%9D%AF-easyre-wp/</url>
    
    <content type="html"><![CDATA[<h1 id="红帽杯-easyre-wp"><a href="#红帽杯-easyre-wp" class="headerlink" title="红帽杯 easyre wp"></a><center>红帽杯 easyre wp</center></h1><p><em>挺有难度的一道题，记录一下.</em><br>首先第一步，扔进die中，发现有upx加密，解密一下，扔进ida中找到main函数。</p><p>这里有几个函数没识别出来，点击去也看不懂，动调看一下。</p><p>动调的时候发现这个函数中的char类型其实存储的是输入的字符串。发现这个以后后面的函数逻辑都比较清楚了。</p><p><img src="/2024/12/06/%E7%BA%A2%E5%B8%BD%E6%9D%AF-easyre-wp/1.png"><br>下面的一个函数猜测是取长度操作，因此第一段加密就是一个简单的xor，解密后得到一串线索：<br><em>Info:The first four chars are <code>flag</code></em></p><p>刚开始看不懂这个有什么用，继续往下做。<br>ok下面有一个函数很明显的base64，并且他加密了十次，推测if中的函数为比较作用，因此直接解密(其实这里是个误导项哈哈~~)<br><img src="/2024/12/06/%E7%BA%A2%E5%B8%BD%E6%9D%AF-easyre-wp/2.png"><br>解密后得到一个网站：<br><a href="https://bbs.pediy.com/thread-254172.htm">https://bbs.pediy.com/thread-254172.htm</a><br>是看雪的一个blog,本来以为可以直接在blog中找到flag,但后来发现好像并没有，于是仔细看了一下文章的内容,是关于如何误导选手解题的，估计我也被误导了。</p><p>于是回头重新寻找flag,<br>发现base64加密的数据下面还有一串数据<br><img src="/2024/12/06/%E7%BA%A2%E5%B8%BD%E6%9D%AF-easyre-wp/3.png"></p><p>查找一下引用，发现了一个新的函数,关键函数我用箭头标出来了：<br><img src="/2024/12/06/%E7%BA%A2%E5%B8%BD%E6%9D%AF-easyre-wp/4.png"></p><p>然后就是猜这个函数的逻辑，v1跟v4指向的是同一字符串，他跟str在if中xor后的结果两位为’f’,’g’,结合上面的info,推测全部的xor结果为flag<br>通过这一线索可以反向求出v1，接着根据底下的xor式可以求出最后的结果，编写脚本得：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> base64<br><br>enc = <span class="hljs-string">&#x27;Iodl&gt;Qnb(ocy&#x27;</span> + <span class="hljs-built_in">chr</span>(<span class="hljs-number">127</span>) + <span class="hljs-string">&#x27;y.i&#x27;</span> + <span class="hljs-built_in">chr</span>(<span class="hljs-number">127</span>) + <span class="hljs-string">&#x27;d`3w&#125;wek9&#123;iy=~yL@EC&#x27;</span><br>input1 = <span class="hljs-string">&#x27;&#x27;</span><br><br>str1 = [<span class="hljs-number">0x40</span>, <span class="hljs-number">0x35</span>, <span class="hljs-number">0x20</span>, <span class="hljs-number">0x56</span>, <span class="hljs-number">0x5D</span>, <span class="hljs-number">0x18</span>, <span class="hljs-number">0x22</span>, <span class="hljs-number">0x45</span>, <span class="hljs-number">0x17</span>, <span class="hljs-number">0x2F</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0x6E</span>, <span class="hljs-number">0x62</span>, <span class="hljs-number">0x3C</span>, <span class="hljs-number">0x27</span>, <span class="hljs-number">0x54</span>, <span class="hljs-number">0x48</span>, <span class="hljs-number">0x6C</span>, <span class="hljs-number">0x24</span>, <span class="hljs-number">0x6E</span>, <span class="hljs-number">0x72</span>,<br>        <span class="hljs-number">0x3C</span>, <span class="hljs-number">0x32</span>, <span class="hljs-number">0x45</span>, <span class="hljs-number">0x5B</span>]<br>str2 = <span class="hljs-string">&#x27;flag&#x27;</span><br>str3 = <span class="hljs-string">&#x27;&#x27;</span><br>flag = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(enc)):<br>    input1 += <span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(enc[i]) ^ i)<br><span class="hljs-built_in">print</span>(input1)<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(str2)):<br>    str3 += <span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(str2[i]) ^ str1[i])<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(str1)):<br>    flag += <span class="hljs-built_in">chr</span>(<span class="hljs-built_in">ord</span>(str3[i % <span class="hljs-number">4</span>]) ^ str1[i])<br><br><span class="hljs-built_in">print</span>(flag)<br></code></pre></td></tr></table></figure><p>得到flag为：flag{Act1ve_Defen5e_Test}</p>]]></content>
    
    
    
    <tags>
      
      <tag>Reverse</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CrackRTF_Wp!!!</title>
    <link href="/2024/12/05/Crack-rtf-wp/"/>
    <url>/2024/12/05/Crack-rtf-wp/</url>
    
    <content type="html"><![CDATA[<p><em>今天遇到一道reverse题，挺有意思的，记录一下。</em></p><span id="more"></span><h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>给了一个exe程序，查壳后发现为32位，扔进ida中查看</p><p><img src="/2024/12/05/Crack-rtf-wp/Crack_rtf1.png" alt="picture"></p><p>程序大致内容为输入两个password，如果两个都正确就通过验证。接下来重点就是分析两个password的验证过程。<br>每个strcmp函数上方都对input进行了一定的处理，然后和给定的字符串比较。进入处理函数查看：</p><p><img src="/2024/12/05/Crack-rtf-wp/Crack_rtf2.png" alt="picture"></p><p>经过查阅发现加密函数为md5加密，直接用soda解密即可。最后输入两个正确的password后程序生成一个解密的rtf文件，打开即可看到flag.<br>Flag{N0_M0re_Free_Bugs}</p>]]></content>
    
    
    
    <tags>
      
      <tag>Reverse</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
